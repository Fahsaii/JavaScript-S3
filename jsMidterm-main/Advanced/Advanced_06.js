//ใช้ในการหาความยาวของชุดวงเล็บที่ถูกต้อง (valid parentheses) ที่ยาวที่สุดในสตริง 
// โดยใช้ Stack เป็นโครงสร้างข้อมูลหลักในการช่วยตรวจสอบและประมวลผล

function longestValidParentheses(str) {
    let maxLen = 0; //ตัวแปรเก็บค่าความยาวของวงเล็บที่ถูกต้องที่ยาวที่สุด (เริ่มต้นที่ 0)
    const stack = [-1]; // สแต็กสำหรับเก็บตำแหน่งของตัวอักษรในสตริง โดยเริ่มต้นด้วยค่า -1 เพื่อช่วยคำนวณความยาวได้ง่ายขึ้นในกรณีที่ชุดวงเล็บปิดสมบูรณ์ตั้งแต่ต้น

    for (let i = 0; i < str.length; i++) { 
        //ถ้าเป็น '(':
        //ให้ดันตำแหน่ง (index) ของมันเข้าไปใน stack
        if (str[i] === '(') { 
            stack.push(i);
        //ทำการ pop ค่าบนสุดของ stack (หมายถึงจับคู่กับวงเล็บเปิด '(')
        //ถ้าหลังจาก pop แล้ว stack ว่างเปล่า แสดงว่าไม่มีวงเล็บเปิดที่จะจับคู่ได้:
        //ให้ดันตำแหน่งปัจจุบัน (i) ลงใน stack เพื่อใช้เป็นตัวอ้างอิง
        //ถ้า stack ไม่ว่างเปล่า:
        //คำนวณความยาวของวงเล็บที่ถูกต้อง (ระยะห่างระหว่างตำแหน่งปัจจุบันและตำแหน่งสุดท้ายใน stack) และอัปเดต maxLen ถ้าค่าความยาวใหม่ยาวกว่าเดิม
        } else { 
            stack.pop(); 
            if (stack.length === 0) { 
                stack.push(i); 
            } else {
                maxLen = Math.max(maxLen, i - stack[stack.length - 1]);
            }
        }
    }
    //หาก maxLen ยังคงเป็น 0 แสดงว่าไม่มีวงเล็บที่ถูกต้องในสตริง ให้คืน "no partners :-{"
    //หากพบวงเล็บที่ถูกต้อง ให้คืนค่าความยาวของชุดวงเล็บที่ยาวที่สุด

    return maxLen === 0 ? "no partners :-{" : maxLen; 
}

console.log(longestValidParentheses("(()"));
console.log(longestValidParentheses(")()())"));
console.log(longestValidParentheses("()))))(()())(")); 